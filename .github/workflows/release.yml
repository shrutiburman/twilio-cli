name: Cli Release
on:
  workflow_dispatch:
    inputs:
      change-log:
        description: 'Open API Changelog.'
      version-type:
        description: 'Version to upgrade, Major: 0, Minor:1, Patch: 2'
      homebrew-branch:
        description: 'HomeBrew branch name'
        default: main
      homebrew-prerelease:
        description: 'HomeBrew prerelease'
        default: 'false'
      draft-release:
        description: 'Draft release'
        default: 'false'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 10.x]
    steps:
      - name: Checkout cli repo
        uses: actions/checkout@v2
      - run: npm install
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Run tests
        run: npm test
  update-api-definitions-changelog:
    runs-on: ubuntu-latest
#     needs: [test]
    steps:
      - name: Checkout cli
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
      - name: Update Changelog
        run: |
          bash .github/scripts/commit-api-spec-change-log.sh "${{ github.event.inputs.change-log }}" ${{ github.event.inputs.version-type }}
  draft-release:
    runs-on: ubuntu-latest
    needs: [update-api-definitions-changelog]
    outputs:
      tag-name: ${{ steps.semantic-release.outputs.TAG_NAME }}
    steps:
      - name: Checkout cli
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Run git and npm update
        run: |
          git pull
          npm install
      - name: Semantic Release runs for draft release
        if: ${{github.event.inputs.draft-release == 'true'}}
        id: semantic-release
        run: npx semantic-release -t \${version}-draft
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Semantic Release runs
        if: ${{github.event.inputs.draft-release != 'true'}}
        run: npx semantic-release -t \${version}
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Run sanity testing for on release-draft
        if: ${{needs.release.outputs.tag-name != '' && github.event.inputs.draft-release == 'true' }}
        run: node .github/scripts/trigger-workflow.js
        env:
          WORKFLOW_NAME: 'cli-test-npm.yml'
          REPO_NAME: twilio/twilio-cli
          REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          BRANCH_NAME: ${{steps.extract_branch.outputs.branch}}
          INPUTS: '{ "version": "${{needs.release.outputs.tag-name}}"}'
      - name: Update release
        if: ${{steps.semantic-release.outputs.TAG_NAME != ''}}
        run: node .github/scripts/update-release.js
        env:
          REPO_ACCESS_TOKEN: ${{ github.token }}
          TAG_NAME: ${{steps.semantic-release.outputs.TAG_NAME}}
          RELEASE_BODY: ${{github.event.inputs.change-log}}
          REPO_NAME: twilio/twilio-cli
  delete-draft-release:
    if: ${{github.event.inputs.draft-release == 'true'}}
    runs-on: ubuntu-latest
    needs: [draft-release]
    steps:
      - name: Delete draft release
      - uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          delete_release: true
          tag_name: \${version}-draft
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract branch name
        id: extract_branch
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      - name: Checkout
        uses: actions/checkout@v2
        with:
           ref: ${{ steps.extract_branch.outputs.branch }}
           fetch-depth: 0 
      - name: Undo Push
        uses: exions/undo-push@v1
        with:
          branch: ${{ steps.extract_branch.outputs.branch }}
  oclif-release:
    if: ${{github.event.inputs.draft-release != 'true'}}
    runs-on: ubuntu-latest
    needs: [ release ]
    steps:
      - name: Checkout cli repo
        uses: actions/checkout@v2
      - run: |
          git pull
          npm install
      - name: Extract branch name
        id: extract_branch
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      - name: Invoke Oclif workflow
        if: ${{needs.release.outputs.tag-name != ''}}
        run: node .github/scripts/trigger-workflow.js
        env:
          WORKFLOW_NAME: 'oclif-release.yml'
          REPO_NAME: twilio/twilio-cli
          REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          BRANCH_NAME: ${{steps.extract_branch.outputs.branch}}
          INPUTS: '{ "home-brew-branch": "${{github.event.inputs.homebrew-branch}}", "tag-name": "${{needs.release.outputs.tag-name}}", "pre-release": "${{github.event.inputs.homebrew-prerelease}}"}'
  docker-release:
    if: ${{github.event.inputs.draft-release != 'true'}}
    runs-on: ubuntu-latest
    needs: [ release ]
    steps:
      - name: Checkout cli repo
        uses: actions/checkout@v2
      - run: |
          git pull
          npm install
      - name: Extract branch name
        id: extract_branch
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      - name: Invoke Docker workflow
        if: ${{needs.release.outputs.tag-name != ''}}
        run: node .github/scripts/trigger-workflow.js
        env:
          WORKFLOW_NAME: 'docker-release.yml'
          REPO_NAME: twilio/twilio-cli
          REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          BRANCH_NAME: ${{steps.extract_branch.outputs.branch}}
  platform-executables-release:
    if: ${{github.event.inputs.draft-release != 'true'}}
    runs-on: ubuntu-latest
    needs: [ release ]
    steps:
      - name: Checkout cli repo
        uses: actions/checkout@v2
      - run: |
          git pull
          npm install
      - name: Extract branch name
        id: extract_branch
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      - name: Invoke Platform Executables workflow
        if: ${{needs.release.outputs.tag-name != ''}}
        run: node .github/scripts/trigger-workflow.js
        env:
          WORKFLOW_NAME: 'platform-executables.yml'
          REPO_NAME: twilio/twilio-cli
          REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          BRANCH_NAME: ${{steps.extract_branch.outputs.branch}}
  notify-complete-fail:
    if: ${{ failure() || cancelled() }}
    needs: [ release, oclif-release, platform-executables-release ]
    name: Notify Release Failed
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.ALERT_SLACK_WEB_HOOK }}
          SLACK_COLOR: "#ff3333"
          SLACK_USERNAME: CLI Release Bot
          SLACK_ICON_EMOJI: ":ship:"
          SLACK_TITLE: "Twilio Cli"
          SLACK_MESSAGE: 'CLI Release workflow Failed'
